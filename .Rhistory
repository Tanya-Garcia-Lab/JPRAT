xmax<-reformatted.data$xmax;
functional.covariate.values.for.prediction<-reformatted.data$functional.covariate.values.for.prediction;
data.sets.as.list
old.names <- convert.new.notation.to.old.for.jprat(study.names,
data.sets.as.list=data.sets.as.list,
time.points.for.prediction,
time.points.for.conditional.prediction,
time.points.for.conditional.prediction.toadd,
nonfunctional.covariate.names,
nonfunctional.covariate.values.for.prediction=nonfunctional.covariate.values.for.prediction,
functional.covariate.names,
#functional.covariate.values.of.interest,
#functional.covariate.values.of.interest.ci,
functional.covariate.values.for.prediction=functional.covariate.values.for.prediction,
xmin=xmin,
xmax=xmax,
othercovariate.names,
event.outcome.names,
delta.names,
use_real_data=use_real_data,
use.functional.beta.intercept,
use.functional.event.coefficients,
use.functional.study.coefficients,
number.of.bootstraps,
check.study.equality,
what.analyzed.separately,
estimated.parameters.common.for.all.studies,
estimate.variances,
estimation.when.censoring.depends.on.z,
glm.link.type,
use.bootstrap.variance,
clusters.are.families
##########################
## For plotting results ##
##########################
#time.points.of.interest,
#time.points.of.interest.ci,
#label.for.alpha.values.over.time,
#nonfunctional.covariate.comparisons,
#plot.parameters,
#do.plots,
#plot.confidence.intervals,
#color.labels,
#legend.labels,
#event.comparison.table,
#functional.covariate.comparisons,
#functional.covariate.comparisons.for.sample.size,
################################
## for computing sample sizes ##
################################
#type1.error,
#type2.error,
#treatment.effect,
#dropout.rate
)
############################
## Output to old notation ##
############################
#######################################
##Input converted to old notation   ###
##used in jprat main estmiation     ###
#######################################
common.param.estimation <- old.names$common.param.estimation ## TRUE
analyze.separately <- old.names$analyze.separately # "event"
boot <- old.names$boot #100 ## labeling
est.cens.depend.z <- old.names$est.cens.depend.z ## False
real_data <- old.names$real_data # TRUE ## data
time_choice.predicted <- old.names$time_choice.predicted  # NULL
time_choice.predicted.toadd <- old.names$time_choice.predicted.toadd # NULL
var.boot  <- old.names$var.boot # TRUE
arbitrary <- old.names$arbitrary # FALSE
beta0int <- old.names$beta0int #0.5
a0 <- old.names$a0 #NULL
combi.study <- old.names$combi.study # 3
combi.choice <- old.names$combi.choice
combi.names  <- old.names$combi.names #"cohort-predict" "cohort-pharos"  "predict-pharos"
compute.study.differences <- old.names$compute.study.differences # FALSE
family.data <- old.names$family.data # FALSE
gamma.param <- old.names$gamma.param # null
la <- old.names$la #1
lb <- old.names$lb #
knot.length <- old.names$knot.length #8
link.type <- old.names$link.type  # "logit"
m <- old.names$m
method <- old.names$method # "gamm4"
maxm <- old.names$maxm     # 1
num_study <- old.names$num_study # 3
num_time <- old.names$num_time 		#13
n <- old.names$n   # 430 915 346
np <- old.names$np 	# 1
num_xx <- old.names$num_xx  # 18
nmax <- old.names$nmax #  915
omega.param <- old.names$omega.param # NULL
param.label <- old.names$param.label # "beta0" "beta1"
par_fu <- old.names$par_fu  # null
spline.constrain <- old.names$spline.constrain # TRUE
time_val <- old.names$time_val #  40  45  50  55  60  65  70  75  80  85  90  95 100
xks  <- old.names$xks       # points for x where to be estimated for each study
zeval  <- old.names$zeval
z.choice  <- old.names$z.choice    # 4
#######################################
##Input converted to old notation   ###
## obtain null array                ###
#######################################
s.names <- old.names$s.names   ## event names # "hdage_nobase"
simus <- old.names$simus # 1  NUMBER OF SIMULATION
theta.names <- old.names$theta.names  # "beta"   "alphas" "Ft"
theta.names.combi <- old.names$theta.names.combi  # "beta"   "alphas" "Ft"
x_lab_names  <- old.names$x_lab_names  ## xx 36, xx37.4. ..x44..... xx 50
z_lab_names  <- old.names$z_lab_names   # A, B, C, D
###################################################
## Form dataset for real data or simulated data  ##
###################################################
axmod <- old.names$axmod  #$cohort
beta0 <- old.names$beta0  # 1
censorrate <- old.names$censorrate # NULL
delta_tmp.list <- old.names$delta_tmp.list # 0 or 1 for each study
frform <- old.names$frform  # NULL
fzrform <- old.names$fzrform # NULL
fxform <- old.names$fxform # NULL
gtmod <- old.names$gtmod  # null
gen.cens.depend.z <- old.names$gen.cens.depend.z  #null
mix_n <- old.names$mix_n 	# null
s_tmp.list <- old.names$s_tmp.list # CAG repeat length for all subject for each study
type_fr <- old.names$type_fr    # null
use.random.effects  <- old.names$use.random.effects
x_tmp.list  <- old.names$x_tmp.list ## all values for x_tmp for each study
##############################
# labeling for results data ##
##############################
iseed <- old.names$iseed #1
##############################
# Generating fixed effects  ##
##############################
lb.max <- old.names$lb.max # 1
par1_fzr <- old.names$par1_fzr # parameter each covar # null
par2_fzr <- old.names$par2_fzr  # null
par1_fx <- old.names$par1_fx  # null
par2_fx <- old.names$par2_fx  # null
par1_fr <- old.names$par1_fr  # null
par2_fr <- old.names$par2_fr  # null
par1_fr2 <- old.names$par1_fr2  # null
par2_fr2 <- old.names$par2_fr2  # null
type_fzr <- old.names$type_fzr  # null
type_fx <- old.names$type_fx    # null
z_tmp.list  <- old.names$z_tmp.list # all values for z_tmp (BASE AGE) for each study
########################################
## Not used parameters in JPRAT  ##
########################################
##################
## from results ##
##################
#alpha.cut <- old.names$alpha.cut    ## NULL
#add.second.legend <- old.names$add.second.legend ## TRUE
#alphax_lab <- old.names$alphax_lab # 1,2,3
#beta.cut <- old.names$beta.cut #NULL
#boot.ci <- old.names$boot.ci # FALSE
#convert.x <- old.names$convert.x #TRUE
#legend.position.use <- old.names$legend.position.use # topright
#round.set <- old.names$round.set # 2
#plot.nw <- old.names$plot.nw #FALSE
#study.ylab <- old.names$study.ylab #"Probability"
#study.xlab <- old.names$study.xlab #"Age (years)"
#time.cut  <- old.names$time.cut #NULL
#ylim.key <- old.names$ylim.key # ylim for different covariate
#ylim.setting <- old.names$ylim.setting #beta0  -10   8
#beta1   -1   1
#alphax -10  10
#alphat -10  10
#Ft       0   1
#z_lab  <- old.names$z_lab #  "zza" "zzb" "zzc" "zzd"
#alphax.ylab <- old.names$alphax.ylab # "Effect on Outcome"
#alphax.xlab <- old.names$alphax.xlab  #"CAG repeats"
#alphat.ylab <- old.names$alphat.ylab  # "Effect on Outcome"
#alphat.xlab <- old.names$alphat.xlab  # "Age (years)"
#######################################
##Input converted to old notation   ###
#######################################
#alphat_lab <- old.names$alphat_lab ## 45, 55
#colors.use <- old.names$colors.use  #hdage_nobase
#"firebrick1"
#par3_fr <- old.names$par3_fr # null
#plot.KM <- old.names$plot.KM #FALSE
#randomeffects.covariate.dependent <- old.names$randomeffects.covariate.dependent  # NULL
#var.lo  <- old.names$var.lo   # "varlo"
#var.hi  <- old.names$var.hi   # "varhi"
#beta_lab  <- old.names$beta_lab
#common.param.data <- old.names$common.param.data # NULL
#gamm.orig <- old.names$gamm.orig # false
#xx_choice.ci  <- old.names$xx_choice   # 42, 44, 46
#zeval.tmp  <- old.names$zeval.tmp     #   base_age_kmeans
#	  A        28.11354
#		B        37.37259
#		C        46.57556
#		D        58.28165
#conf.int.use <- old.names$conf.int.use		## TRUE
#nn.comparison <- old.names$nn.comparison  ## nc1: 1
#s.names.short  <- old.names$s.names.short #hdage_nobase
#"Motor Diagnosis (DCL=4)"
#time_choice <- old.names$time_choice ## 45, 55
#time_choice.ci <- old.names$time_choice.ci ## 40 45 50 55 60
#xx_choice  <- old.names$xx_choice # 42, 44, 46
#var.est  <- old.names$var.est # "est"
#zz_comp  <- old.names$zz_comp # 1 1
#xx_comp <- old.names$xx_comp	# 42, 46
#xx_choice.sample.size <- old.names$xx_choice.sample.size  ## 42
#######################################
## get null theta arrays for storage ##
#######################################
##all_null_theta : array to store all estimates. set to NULL values
##################################33
# no examples but add documentations
##################################
null.theta <- all_null_theta(theta.names,
study.names,
event.names=s.names,  #"hdage_nobase"
z_lab_names,          # base_age: A, B, C,D
x_lab_names,         ## points for CAG repeats
label.dim.simus=simus,
label.name.simus=paste("iter",1:simus,sep=""),
time_val,  ## 40  45  50  55  60  65  70  75  80  85  90  95 100
param.label,  ## beta0 beta1
time_choice.predicted,time_choice.predicted.toadd, ## null
la  # 1
)
## get combi null theta arrays
combi.null.theta <- all_null_theta(theta.names.combi,
study.names=combi.names,
event.names=s.names,
z_lab_names,
x_lab_names,
label.dim.simus=simus,
label.name.simus=paste("iter",1:simus,sep=""),
time_val,
param.label, ## beta0 beta1
time_choice.predicted,time_choice.predicted.toadd,
la)
#, , zz = B, xx = xx44.4, time = t100
#event
#study            hdage_nobase
#cohort-predict            0
#cohort-pharos             0
#predict-pharos            0
## for bootstrap
boot.null.theta <- all_null_theta(theta.names,
study.names,
event.names=s.names,
z_lab_names,
x_lab_names,
label.dim.simus=boot,
label.name.simus=paste("boot",1:boot,sep=""),
time_val,param.label,
time_choice.predicted,time_choice.predicted.toadd,
la
)
boot.combi.null.theta <- all_null_theta(theta.names.combi,
study.names=combi.names,
event.names=s.names,
z_lab_names,
x_lab_names,
label.dim.simus=boot,
label.name.simus=paste("boot",1:boot,sep=""),
time_val,param.label,
time_choice.predicted,time_choice.predicted.toadd,
la
)
## estimation will be stored here: see while loop method=="gamm4"
## beta terms
betaest.store <- null.theta$null.theta.simus.est.ciboot$beta
## alpha terms
alphasest.store <- null.theta$null.theta.simus.est.ciboot$alpha
## Ft terms
Ftest.store <- null.theta$null.theta.simus.est.ciboot$Ft
if(num_study > 1){
## storage for comparing study differences
betabootci.store <- combi.null.theta$null.theta.simus.est.ci$beta   ## for beta
alphasbootci.store <- combi.null.theta$null.theta.simus.est.ci$alpha ## for alpha
Ftbootci.store <- combi.null.theta$null.theta.simus.est.ci$Ft  ## for Ft
} else {
betabootci.store <- NULL
alphasbootci.store <- NULL
Ftbootci.store <- NULL
}
## Ft predicted terms
Ftest.predicted.store <-  null.theta$null.theta.simus.est.ciboot$Ft.predicted  ## NULL
## NOT USED
alphasijest.store <- NULL
alphasijest.var.store <- NULL
alphasijbootci.store <- NULL
Ftijest.store <- NULL
Ftijest.var.store <- NULL
Ftijbootci.store <- NULL
## where to store number of event times <=t0
count.store <- NULL
count.store.outside <- NULL
truth <-  get.truth(
combi.study,combi.choice,
real_data,num_study,np,lb,num_time,
beta0int,beta0,gamma.param,omega.param,
time_val,time_choice.predicted,time_choice.predicted.toadd,
num_xx,a0,axmod,la,xks,zeval,z.choice,
sigmar=par2_fr[1],sigmau=par_fu["sd"],gtmod,use.random.effects,
null.theta,combi.null.theta)
## difference is 0?
betadiff.store <- truth$beta.diff
alphasdiff.store <- truth$alphas.diff
Ftdiff.store <- truth$Ft.diff
library(JPRAT)
truth <-  get.truth(
combi.study,combi.choice,
real_data,num_study,np,lb,num_time,
beta0int,beta0,gamma.param,omega.param,
time_val,time_choice.predicted,time_choice.predicted.toadd,
num_xx,a0,axmod,la,xks,zeval,z.choice,
sigmar=par2_fr[1],sigmau=par_fu["sd"],gtmod,use.random.effects,
null.theta,combi.null.theta)
## difference is 0?
betadiff.store <- truth$beta.diff
alphasdiff.store <- truth$alphas.diff
Ftdiff.store <- truth$Ft.diff
getAnywhere(get.truth)
library(JPRAT)
knitr::opts_chunk$set( collapse = TRUE,
comment = "#>",
fig.path = "README-")
library(JPRAT)
##get number at risk table
study.names=c("cohort", "predict", "pharos");
data.file.names=c("cohort", "predict", "pharos");
event.outcome.names=c("hdage_nobase", "mcione", "tfctwo");
nonfunctional.covariate.names=c("base_age");
functional.covariate.names="CAG";
nonfunctional.covariate.value=c(40);
functional.covariate.values.of.interest=c(46, 48, 50) ;
time.points.for.prediction=seq(46, 66, by=5);
estimated.parameters.common.for.all.studies=FALSE;
number.at.risk <- compute.number.at.risk.for.HD(study.names,
data.file.names,
event.outcome.names,
nonfunctional.covariate.names,
functional.covariate.names,
nonfunctional.covariate.value,
functional.covariate.values.of.interest,
time.points.for.prediction,
estimated.parameters.common.for.all.studies
)
# Check up for the time points criteria  ##
time.points.for.conditional.prediction=c(46, 51, 56);
functional.covariate.values.of.interest.ci=c(46, 51);
functional.covariate.comparisons=c(46, 51);
time.points.of.interest=c(46, 56);
time.points.of.interest.ci=c(46, 51);
check.criteria<-criteria.time.points.for.jprat.analysis(study.names,
data.file.names,
time.points.for.prediction,
nonfunctional.covariate.names,
functional.covariate.names,
nonfunctional.covariate.value,
time.points.for.conditional.prediction,
functional.covariate.values.of.interest,
functional.covariate.values.of.interest.ci,
functional.covariate.comparisons,
time.points.of.interest,
time.points.of.interest.ci)
library(JPRAT)
#Input data for JPRAT estimation procedure
study.names=c("cohort", "predict", "pharos");
data.file.names=c("cohort", "predict", "pharos");
nonfunctional.covariate.names=c("base_age");
functional.covariate.names="CAG";
othercovariate.names=c("firstyear", "lastyear")
event.outcome.names=c("hdage_nobase", "mcione", "tfctwo");
delta.names=c("delta.hdage_nobase", "delta.mcione", "delta.tfctwo");
time.points.for.prediction=seq(46, 66, by=5);
time.points.for.conditional.prediction=c(46, 51, 56);
time.points.for.conditional.prediction.toadd=c(5);
nonfunctional.covariate.value=c(40);
functional.covariate.values.of.interest=c(46, 48, 50) ;
# parameter setup to analyze data using JPRAT estimation procedure
number.of.bootstraps=100;
use.functional.beta.intercept= TRUE ;
use.functional.event.coefficients= TRUE;
use.functional.study.coefficients=TRUE;
check.study.equality=FALSE;
what.analyzed.separately="studyevent";
estimated.parameters.common.for.all.studies=FALSE;
use.bootstrap.variance=TRUE ;
estimation.when.censoring.depends.on.z=FALSE ;
write.output=TRUE;
# JPRAT estimation
jprat.estimat.results<-jprat.wrapper(study.names=study.names, data.file.names=data.file.names,                                                    nonfunctional.covariate.names=nonfunctional.covariate.names,
functional.covariate.names=functional.covariate.names,
othercovariate.names=othercovariate.names, event.outcome.names=event.outcome.names,
delta.names=delta.names, time.points.for.prediction=time.points.for.prediction,
time.points.for.conditional.prediction=time.points.for.conditional.prediction,
time.points.for.conditional.prediction.toadd=time.points.for.conditional.prediction.toadd,
nonfunctional.covariate.value=nonfunctional.covariate.value,
functional.covariate.values.of.interest=functional.covariate.values.of.interest,
number.of.bootstraps=number.of.bootstraps,
use.functional.beta.intercept=use.functional.beta.intercept,
use.functional.event.coefficients=use.functional.event.coefficients,
use.functional.study.coefficients=use.functional.study.coefficients,
check.study.equality=check.study.equality,
estimated.parameters.common.for.all.studies=estimated.parameters.common.for.all.studies,
what.analyzed.separately=what.analyzed.separately,
estimation.when.censoring.depends.on.z=estimation.when.censoring.depends.on.z,
use.bootstrap.variance=use.bootstrap.variance, write.output=write.output)
truth <-  get.truth(
combi.study,combi.choice,
real_data,num_study,np,lb,num_time,
beta0int,beta0,gamma.param,omega.param,
time_val,time_choice.predicted,time_choice.predicted.toadd,
num_xx,a0,axmod,la,xks,zeval,z.choice,
sigmar=par2_fr[1],sigmau=par_fu["sd"],gtmod,use.random.effects,
null.theta,combi.null.theta)
library(devtools)
library(roxygen)
library(roxygen2)
library(rmarkdown)
install.packages("roxygen")
install.packages("rmarkdown")
library(knitr)
library(roxygen2)
library(rmarkdown)
document()
install.packages("gamm4")
install.packages("plyr")
document()
build()
install()
library(rmarkdown)
install.packages("Rcpp")
library(rmarkdown)
library(roxygen2)
library(knitr)
library(devtools)
document()
build()
install()
install.packages("tibble")
install.packages("tibble")
library(roxygen2)
library(rmarkdown)
library(knitr)
library(devtools)
document()
build()
install()
check()
document()
build()
install()
check()
library(devtools)
library(roxygen2)
library(knitr)
library(rmarkdown)
document()
build()
install()
install.packages("zoo")
library(rmarkdown)
library(roxygen2)
library(devtools)
library(knitr)
document()
install.packages("zoo")
install.packages("sandwich")
document()
build()
install()
q
install.packages("mnormt")
install.packages("mnormt")
library(rmarkdown)
library(knitr)
library(roxygen2)
library(devtools)
document()
build()
install()
library(rmarkdown)
library(knitr)
library(roxygen2)
library(devtools)
document()
install.packages("mnormt")
install.packages("rlang")
install.packages("rlang")
document()
library(rmarkdown)
library(devtools)
library(knitr)
library(roxygen2)
document()
build()
install()
install.packages("rlang")
install.packages("pkgbuild")
install.packages("ps")
install.packages("pillar")
install.packages("vctrs")
install.packages("scales")
library(rmarkdown)
library(knitr)
library(roxygen2)
library(devtools)
document()
build()
install()
check()
document()
