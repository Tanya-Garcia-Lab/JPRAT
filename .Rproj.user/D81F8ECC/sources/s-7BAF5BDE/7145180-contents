########################
## remove all objects ##
########################
rm(list=ls(all=TRUE))


###############################
## get particular parameters ##
###############################
#source("../../../real_setting.R")
#source("../../method_setting.R")
#source("../estimation_type.R")
#source("comparison.R")

##################
## Source codes ##
##################
source("../../../../codes/R_codes/Rcode-updated/pseudo_code/main.R")
source("../../../../codes/R_codes/realdata/organize_functions.R")
source("../../../../codes/R_codes/Rcode-updated/pseudo_code/jprat_function.R")
source("../../../../codes/R_codes/Rcode-updated/pseudo_code/default_setting_estimation_results.R")
source("../../../../codes/R_codes/Rcode-updated/pseudo_get_results.R")



dyn.load("f90_codes/cohortmix.so")



###################################
## Set up the data  to run JPRAT ##
###################################

##################
# Input: Data   ##
##################
study.names=c("cohort", "predict", "pharos");
data.file.names=c("cohort", "predict", "pharos");
nonfunctional.covariate.names=c("base_age");
functional.covariate.names="CAG";
othercovariate.names=c("firstyear", "lastyear")
event.outcome.names=c("hdage_nobase", "mcione", "tfctwo");
delta.names=c("delta.hdage_nobase", "delta.mcione", "delta.tfctwo");
time.points.for.prediction=seq(46, 66, by=5)
time.points.for.conditional.prediction=c(46, 51, 56);
time.points.for.conditional.prediction.toadd=c(5, 10);
nonfunctional.covariate.value=c(40);
functional.covariate.values.of.interest=c(46, 48, 50) ;

#############################
## Input: How to analysis  ##
#############################
number.of.bootstraps=100;
use.functional.beta.intercept <- TRUE
use.functional.event.coefficients <- TRUE
use.functional.study.coefficients <- TRUE
check.study.equality <- FALSE
what.analyzed.separately<-"studyevent"
estimated.parameters.common.for.all.studies <- FALSE
use.bootstrap.variance <-TRUE
estimation.when.censoring.depends.on.z <-FALSE

###########################
## For saving the output ##
###########################
write.output <- TRUE

##################################################################################
## See pseudo_default_setting_estimation_results.R file                        ###
## See default.options.for.data.setting for those arguments's default options  ###
##################################################################################
#use.real.data=TRUE;
#glm.link.type <- "logit"
#clusters.are.families <-FALSE
#estimate.variances="est" ##TRUE







##########################################################################
##########################################################################
# Input argumnets used to plot reuslts                             #######
##########################################################################
##########################################################################


####################################
## Set up the data to get results ##
####################################

#study.names=c("cohort", "predict", "pharos");
#functional.covariate.values.of.interest=c(46, 48, 50);
functional.covariate.values.of.interest.ci=c(46, 51);
time.points.of.interest= c(46, 56);
time.points.of.interest.ci=seq(46, 66, by=5);
#label.for.alpha.values.over.time=NULL %c(46, 56);
#nonfunctional.covariate.comparisons=list(comp1=c(1,1)),
which.nonfunctional.covariate.comparisons=c(1,1);
color.names=c("firebrick1", "darkgreen", "black"); ## for color.label.key
legend.names=c("Motor Diagnosis (DCL=4)", "Cognitive Impairment", "Stage II TFC")
functional.covariate.comparisons=c(46, 51);
#functional.covariate.comparisons.for.sample.size=NULL;
do.plots=TRUE;
plot.confidence.intervals=TRUE;
add.number.at.risk.legend=TRUE;
ylabel.for.plots.comparing.studies="Probability"
xlabel.for.plots.comparing.studies="Age (years)"
file.name.for.analysis="test" ## figure names
show.results.description=FALSE;
########################################################
## for computing sample sizes: users do not need them ##
########################################################
#type1.error=0.05;
#type2.error=0.2;
#treatment.effect=log(seq(25,75,by=25)/100);
#dropout.rate=0.1

##################################################################################
## See pseudo_default_setting_estimation_results.R file                        ###
## See default.options.for.data.setting for those arguments's default options  ###
##################################################################################
#use.real.data=TRUE;
#glm.link.type <- "logit"
#clusters.are.families <-FALSE
#estimate.variances="est" ##TRUE
#paper.type<-"clinical"
###
### to get results
###
# combine.data <- FALSE
#plot.parameters=FALSE;
#paper.type="clinical";
#event.comparison.table=list(nc1=event.outcome.names)


###########################
## call JPRAT estimation ##
###########################
source("../../../../codes/R_codes/Rcode-updated/pseudo_code/setup_data.R")
source("../../../../codes/R_codes/Rcode-updated/pseudo_code/call_jprat_function.R")




##############################################
# command line to Combine results
##############################################
# Do we need this?
#sh combine_results.sh

##################
## call results ##
##################
source("../../../../codes/R_codes/Rcode-updated/pseudo_call_results.R")



#########################
## unload cohortmix.so ##
#########################
dyn.unload("../../../../codes/f90_codes/cohortmix.so")
